logu<-log(runif(1))
if(logMH>logu){
if(mean(gamma_curr!=gamma_prop)){
Success2<-Success2 + 1
}
gamma_curr<-gamma_prop
#print("accept")
post_curr<-post_prop
Success<-Success + 1
}
}
Total<-Total + 1
}
gamma[i,]<-gamma_curr
gind<-(1:NX)*gamma[i,]
g_ind<-gind[gind!=0]
m<-gamma_density(gamma[i,],pi_a,pi_b,m0,V0,mu_y[i,],X,NM,sigsq_W,XTX,alpha_e,beta_e)
XTXg<-m$XTXg
Xg<-m$Xg
ySy<-m$YSY
}
else{
stop("Invalid method selected")
}
#print("gamma")
# sigsq_e
b_e<-c(matrix(beta_e + 0.5*ySy))
sigsq_e[i]<-rigamma(1,a_e,b_e)
#print("sigsq_e")
# Iteration Counter
if(i/it_count==floor(i/it_count)){
print(i)
}
if(time.check=="TRUE"){
t<-c(t,difftime(Sys.time(),t0,u="secs"))
}
}
return(list(t=t,X=X,y=y,M=M,Z=Z,m_prot=m_prot,m_chal=m_chal,Mvec=Mvec,gamma=gamma,wf=wf,mu_w=mu_w,mu_y=mu_y,b=b,sigsq_e=sigsq_e,sigsq_b=sigsq_b,sigsq_w=sigsq_w,sigsq_y=sigsq_y,pi=pi))
}
else{
if(time.check=="TRUE"){
t0<-Sys.time()
t<-0
}
y<-c(y)
NY<-length(y)
MD<-data.frame(y,Challenge,Protective)
colnames(MD)<-c("y","Challenge","Protective")
m<-summaryBy(y ~ Protective*Challenge,data=MD,FUN=c(mean,length))
m_prot<-m[,1]
m_chal<-m[,2]
mu_y0<-m[,3]
mu_y<-matrix(ncol=length(mu_y0),nrow=iters)
mu_y[1,]<-mu_y0
sigsq_y0<-var(mu_y0)
sigsq_y<-c()
sigsq_y[1]<-sigsq_y0
M<-matrix(0,nrow=length(y),ncol=nrow(m))
NUM_X<-c()
Mvec<-c()
for(i in 1:nrow(m)){
NUM_X[i]<-which(Protective==m[i,1] & Challenge==m[i,2])[1]
M[(which(Protective==m[i,1] & Challenge==m[i,2])),i]<-1
Mvec[(which(Protective==m[i,1] & Challenge==m[i,2]))]<-i
}
MTMc<-colSums(M)
NM<-ncol(M)
a_e<-0.5*NM + alpha_e
X<-cbind(1,data.matrix(X[NUM_X,]))
XTX<-t(X)%*%X
gamma<-matrix(rep(0,ncol(X)*iters),ncol=ncol(X))
gamma[1,]<-gamma0
gamma_curr<-gamma0
if(sum(gamma0)==1){
wf<-matrix(rep(0,ncol(X)*iters),ncol=ncol(X))
wf[1,1]<-w0[1]
}
else{
wf<-matrix(rep(0,ncol(X)*iters),ncol=ncol(X))
wf[1,]<-w0*gamma0
}
sigsq_e<-c()
sigsq_e[1]<-sigsq_e0
sigsq_w<-c()
sigsq_w[1]<-sigsq_w0[2]
mu_w<-c()
mu_w[1]<-mu_w0
if(is.list(Z)==FALSE){
print("WARNING: Z must be a list")
}
Zname<-list()
ZX<-c()
levelcolZ<-c()
numcolZ<-dim(array(Z))
for(i in 1:numcolZ){
Zname[[i]]<-levels(factor(Z[[i]]))
ZX<-cbind(ZX,Z[[i]])
levelcolZ<-c(levelcolZ,length(levels(factor(Z[[i]]))))
}
#numcolZ<-ncol(data.matrix(Z))
if(numcolZ==1){
sumprevcolZ<-0
}
else{
sumprevcolZ<-c()
for(l in 1:numcolZ){
sumprevcolZ[l]<-sum(levelcolZ[1:l])-levelcolZ[l]
}
}
Z<-data.matrix(ZX)
c=ncol(Z)
ZZ<-c()
for(d in 1:c){
ZZ<-cbind(ZZ,dummy(Z[,d]))
}
Z<-ZZ
colnames(Z)<-NULL
b<-matrix(rep(0,ncol(data.matrix(Z))*iters),ncol=ncol(data.matrix(Z)))
b[1,]<-b0
sigsq_b<-matrix(rep(0,c*iters),ncol=c)
sigsq_b[1,]<-sigsq_b0
sigsq_B<-rep(sigsq_b0,levelcolZ)
gind<-(1:ncol(X))*gamma[1,]
g_ind<-gind[gind!=0]
Xg<-Matrix(data.matrix(X[,g_ind]))
XTXg<-Matrix(XTX[g_ind,g_ind])
pi<-c()
pi[1]<-pi0
# Acceptance Rate Counters
Success<-0
Success2<-0
Total<-0
# Parameters with fixed values
a_b<-0.5*levelcolZ + alpha_b
ZTZc<-colSums(Z)
NX<-ncol(X)
J<-length(gamma0[-1])
Mu_W<-c(mu_intercept0,rep(mu_w[1],J))
sigsq_W<-c(sigsq_w0[1],rep(sigsq_w[1],J))
yZb<-y-Z%*%b[1,]
Xw<-Xg%*%wf[1,g_ind]
Z<-Matrix(Z)
M<-Matrix(M)
DB<-ncol(Z)
alpha_sigsq_y<-NY/2 + alpha_y
m0<-c(mu_intercept0,rep(mu_w0,(NX-1)))
V0<-rbind(0,cbind(0,matrix(var_mu_w0,nrow=NX-1,ncol=NX-1)))
ZTZ<-Matrix(data.matrix(t(Z)%*%Z))
#MMM<-c()
#for(i in 1:55){
#  for(j in 1:55){
#    if(all(X[i,]==c(1,XMIN_PAIRS[j,,Vinny]))){
#      MMM[i]<-MEAN_PAIRS[,j,Vinny]
#    }
#  }
#}
print(1)
for(i in 2:iters){
var_w<-data.matrix(solve(XTXg + diag((1/sigsq_W[g_ind]),length(g_ind)) ))
mean_w<-var_w%*%((t(Xg)%*%mu_y[i-1,]) + Mu_W[g_ind]/sigsq_W[g_ind])
wf[i,g_ind]<-rmvnorm(1,mean_w,sigsq_e[i-1]*var_w)
#wf[i,]<-REGRES_PAIRS[,,1]
Xw<-Xg%*%wf[i,g_ind]
#print("wf")
# mu_y
var_mu_y<-c(matrix((1/(rep((1/sigsq_e[i-1]),NM) + (1/sigsq_y[i-1])*MTMc))))
mean_mu_y<-c(matrix(var_mu_y * (Xw/sigsq_e[i-1] + (1/sigsq_y[i-1])*c(matrix(t(M)%*%(y-Z%*%b[i-1,]))))))
mu_y[i,]<-rnorm(NM,mean_mu_y,sqrt(var_mu_y))
#mu_y[i,]<-MMM
#print("mu_y")
# sigsq_y
beta_sigsq_y<-c(matrix(0.5*sum((y - c(mu_y[i,Mvec]) - c(matrix(Z%*%b[i-1,])))^2) + beta_y))
sigsq_y[i]<-rigamma(1,alpha_sigsq_y,beta_sigsq_y)
#print("sigsq_y")
# b
b[i,]<-b[i-1,]
for(s in 1:numcolZ){
Z1<-Z[,((sumprevcolZ[s]+1):(sumprevcolZ[s]+levelcolZ[s]))]
Z2<-Z[,-((sumprevcolZ[s]+1):(sumprevcolZ[s]+levelcolZ[s]))]
b2<-b[i,-((sumprevcolZ[s]+1):(sumprevcolZ[s]+levelcolZ[s]))]
var_bb<-1/(colSums(Z1)/sigsq_y[i-1] + 1/sigsq_b[i-1,s])
mean_bb<-var_bb*(t(Z1)%*%(y -  mu_y[i,Mvec] - Z2%*%b2))/sigsq_y[i-1]
b[i,((sumprevcolZ[s]+1):(sumprevcolZ[s]+levelcolZ[s]))]<-rnorm(length(mean_bb),c(matrix(mean_bb)),c(matrix(sqrt(var_bb))))
b[i,((sumprevcolZ[s]+1):(sumprevcolZ[s]+levelcolZ[s]))]<-b[i,((sumprevcolZ[s]+1):(sumprevcolZ[s]+levelcolZ[s]))]-mean(b[i,((sumprevcolZ[s]+1):(sumprevcolZ[s]+levelcolZ[s]))])
wf[i,1]<-wf[i,1]+mean(b[i,((sumprevcolZ[s]+1):(sumprevcolZ[s]+levelcolZ[s]))])
mu_y[i,]<-mu_y[i,]+mean(b[i,((sumprevcolZ[s]+1):(sumprevcolZ[s]+levelcolZ[s]))])
# sigsq_b
b_b<-beta_b[s] + 0.5*sum((b[i,((sumprevcolZ[s]+1):(sumprevcolZ[s]+levelcolZ[s]))])^2)
sigsq_b[i,s]<-rigamma(1,a_b[s],b_b)
}
sigsq_B<-rep(sigsq_b[i,],levelcolZ)
#print("sigsq_B")
# mu_w
MW<-solve(diag(1,NM) + Xg%*%diag(sigsq_W[g_ind],length(sigsq_W[g_ind]))%*%t(Xg))
var_mu_w<-c(matrix((1/((1/var_mu_w0) + t(rowSums(data.matrix(Xg[,-1])))%*%MW%*%rowSums(data.matrix(Xg[,-1]))))))
mean_mu_w<-c(matrix(var_mu_w*(mu_w0/var_mu_w0 + t(rowSums(data.matrix(Xg[,-1])))%*%MW%*%(mu_y[i,] - mu_intercept0))))
mu_w[i]<-rnorm(1,mean_mu_w,sqrt(sigsq_e[i-1]*var_mu_w)) # mean((REGRES_PAIRS[,which(REGRES_PAIRS[,,12]!=0),12])[-1]) #
Mu_W<-c(mu_intercept0,rep(mu_w[i],J))
#print("mu_w")
#sigsq_w
if(sum(gamma[i-1,-1])>1){
alpha_sigsq_w<-sum(gamma[i-1,-1])/2 + alpha_w
beta_sigsq_w<-(1/(2*sigsq_e[i-1]))*sum((wf[i,g_ind[-1]]-mu_w[i])^2) + beta_w
sigsq_w[i]<-rigamma(1,alpha_sigsq_w,beta_sigsq_w)
}
else{
sigsq_w[i]<-0.001
}
sigsq_W<-c(sigsq_w0[1],rep(sigsq_w[i],J))
#print("sigsq_w")
# pi
alpha_pi<-sum(gamma[i-1,-1])+pi_a
beta_pi<-sum(gamma[i-1,-1]==0)+pi_b
pi[i]<-rbeta(1,alpha_pi,beta_pi)
#print("pi")
#gamma
if(method=="fixed"){
gamma[i,]<-gamma[i-1,]
m<-gamma_density(gamma[i,],pi_a,pi_b,m0,V0,mu_y[i,],X,NM,sigsq_W,XTX,alpha_e,beta_e)
XTXg<-m$XTXg
Xg<-m$Xg
ySy<-m$YSY
}
else if(method=="Bern"){
gamma[i,1]<-gamma[i-1,1]
samp<-sample((2:NX),(NX-1))
gam1 <- gamma_curr
gam1[samp[1]]<-1
gam0 <- gamma_curr
gam0[samp[1]] <-0
P1<-gamma_density(gam1,pi_a,pi_b,m0,V0,mu_y[i,],X,NM,sigsq_W,XTX,alpha_e,beta_e)$logmarg
P0<-gamma_density(gam0,pi_a,pi_b,m0,V0,mu_y[i,],X,NM,sigsq_W,XTX,alpha_e,beta_e)$logmarg
prob<-(1/(1 + exp(P0-P1)))
if(is.na(prob>-1)=="FALSE"){
gamma_curr[samp[1]]<-rbern(1,prob)
gamma[i,samp[1]]<-gamma_curr[samp[1]]
if(gamma_curr[samp[1]]==1){
PP<-P1
}
else{
PP<-P0
}
}
else{
gamma[i,samp[1]]<-gamma[i-1,samp[1]]
}
for(j in samp[2:(NX-1)]){
gam1 <- gamma_curr
gam1[j]<-1
gam0 <- gamma_curr
gam0[j] <-0
if(all(gamma_curr==gam1)){
P1<-PP
P0<-gamma_density(gam0,pi_a,pi_b,m0,V0,mu_y[i,],X,NM,sigsq_W,XTX,alpha_e,beta_e)$logmarg
}
else{
P1<-gamma_density(gam1,pi_a,pi_b,m0,V0,mu_y[i,],X,NM,sigsq_W,XTX,alpha_e,beta_e)$logmarg
P0<-PP
}
prob<-(1/(1 + exp(P0-P1)))
if(is.na(prob>-1)=="FALSE"){
gamma_curr[j]<-rbern(1,prob)
gamma[i,j]<-gamma_curr[j]
if(gamma_curr[j]==1){
PP<-P1
}
else{
PP<-P0
}
}
else{
gamma[i,j]<-gamma[i-1,j]
}
}
gind<-(1:NX)*gamma[i,]
g_ind<-gind[gind!=0]
m<-gamma_density(gamma[i,],pi_a,pi_b,m0,V0,mu_y[i,],X,NM,sigsq_W,XTX,alpha_e,beta_e)
XTXg<-m$XTXg
Xg<-m$Xg
ySy<-m$YSY
}
else if(method=="log-MH"){
if(pi_prop=="pi"){
PIP1<-pi[i]
PIP2<-pi[i-1]
}
else{
PIP1<-pi_prop
PIP2<-pi_prop
}
gamma[i,1]<-gamma[i-1,1]
sample_gam<-sample((2:NX),(NX-1))
if((ncol(X)-1)%%f==0){
fact_samp<-c(rep(f,(NX-1)%/%f))
}
else{
fact_samp<-c(rep(f,(NX-1)%/%f),(NX-1)%%f)
}
# j = 1
gamma_prop <- gamma_curr
gamma_prop[sample_gam[1:fact_samp[1]]]<-rbern(fact_samp[1],PIP1)
prop<-gamma_prop[sample_gam[1:fact_samp[1]]]
curr<-gamma_curr[sample_gam[1:fact_samp[1]]]
q_curr<-sum(dbern(curr,PIP2,log=TRUE))
post_prop<-gamma_density(gamma_prop,pi_a,pi_b,m0,V0,mu_y[i,],X,NM,sigsq_W,XTX,alpha_e,beta_e)$logmarg
q_prop<-sum(dbern(prop,PIP1,log=TRUE))
post_curr<-gamma_density(gamma_curr,pi_a,pi_b,m0,V0,mu_y[i,],X,NM,sigsq_W,XTX,alpha_e,beta_e)$logmarg
logMH<-c(matrix(q_curr + post_prop - q_prop - post_curr))
#print("MH")
#print(exp(logMH))
#print(gamma_curr)
if(is.na(logMH>-Inf)=="FALSE"){
logu<-log(runif(1))
#print(exp(logu))
if(logMH>logu){
if(sum(gamma_curr==gamma_prop)==length(gamma_curr)){
Success2<-Success2 + 1
}
gamma_curr<-gamma_prop
post_curr<-post_prop
Success<-Success + 1
}
}
#print(gamma_curr)
Total<-Total + 1
for(j in 2:length(fact_samp)){
gamma_prop <- gamma_curr
gamma_prop[sample_gam[(((j-1)*f + 1):((j-1)*f + fact_samp[j]))]]<-rbern(fact_samp[j],PIP1)
prop<-gamma_prop[sample_gam[(((j-1)*f + 1):((j-1)*f + fact_samp[j]))]]
curr<-gamma_curr[sample_gam[(((j-1)*f + 1):((j-1)*f + fact_samp[j]))]]
q_curr<-sum(dbern(curr,PIP2,log=TRUE))
post_prop<-gamma_density(gamma_prop,pi_a,pi_b,m0,V0,mu_y[i,],X,NM,sigsq_W,XTX,alpha_e,beta_e)$logmarg
q_prop<-sum(dbern(prop,PIP1,log=TRUE))
logMH<-c(matrix(q_curr + post_prop - q_prop - post_curr))
#print(exp(logMH))
if(is.na(logMH>-Inf)=="FALSE"){
logu<-log(runif(1))
if(logMH>logu){
if(mean(gamma_curr!=gamma_prop)){
Success2<-Success2 + 1
}
gamma_curr<-gamma_prop
#print("accept")
post_curr<-post_prop
Success<-Success + 1
}
}
Total<-Total + 1
}
gamma[i,]<-gamma_curr
gind<-(1:NX)*gamma[i,]
g_ind<-gind[gind!=0]
m<-gamma_density(gamma[i,],pi_a,pi_b,m0,V0,mu_y[i,],X,NM,sigsq_W,XTX,alpha_e,beta_e)
XTXg<-m$XTXg
Xg<-m$Xg
ySy<-m$YSY
}
else{
stop("Invalid method selected")
}
#print("gamma")
# sigsq_e
b_e<-c(matrix(beta_e + 0.5*ySy))
sigsq_e[i]<-rigamma(1,a_e,b_e)
#print("sigsq_e")
# Iteration Counter
if(i/it_count==floor(i/it_count)){
print(i)
}
if(time.check=="TRUE"){
t<-c(t,difftime(Sys.time(),t0,u="secs"))
}
}
return(list(t=t,Zname=Zname,X=X,y=y,M=M,m_prot=m_prot,m_chal=m_chal,levelcolZ=levelcolZ,Z=Z,Mvec=Mvec,gamma=gamma,wf=wf,mu_w=mu_w,mu_y=mu_y,b=b,sigsq_e=sigsq_e,sigsq_b=sigsq_b,sigsq_w=sigsq_w,sigsq_y=sigsq_y,pi=pi))
}
}
######## LOAD DATA FOR ANALYSIS
load("../h3.data.model.RData")
alpha <- 1
beta <- 4
alpha_pi <- (alpha-1)/length(sample_H3) + 1
beta_pi <- (beta-1)/length(sample_H3) + 1
alpha_pi <- (alpha-1)/1 + 1
beta_pi <- (beta-1)/1 + 1
alpha_pi
beta_pi
data_h3 <- data.matrix(h3.data[,16:ncol(h3.data)])
# OPTION: remove columns that are all zero
# data_h3 <- data_h3[,which(colMeans(data_h3) %in% c(0))]
titre_h3 <- as.numeric(h3.data$titre)[sample_H3[[dataset]]]
date_h3 <- factor(h3.data$date[sample_H3[[dataset]]])
challenge_h3 <- factor(h3.data$challenge[sample_H3[[dataset]]])
protective_h3 <- factor(h3.data$protective[sample_H3[[dataset]]])
# OPTION: remove columns that are all zero
# data_h3 <- data_h3[,which(colMeans(data_h3) %in% c(0))]
titre_h3 <- as.numeric(h3.data$titre)
date_h3 <- factor(h3.data$date)
challenge_h3 <- factor(h3.data$challenge)
protective_h3 <- factor(h3.data$protective)
m <- eSABRE(log(titre_h3), data_h3, list(challenge_h3, protective_h3, date_h3),
Challenge = challenge_h3, Protective = protective_h3, iters = 10000,
it_count = 100, pi_a = alpha_pi, pi_b = beta_pi, f = 30)
?install.packages
dataset
dataset
library(kableExtra)
library(shiny)
library(png)
library(RColorBrewer)
install.packages("kableExtra")
getwd()
setwd("~/Documents/git/ShinyCourse/Day 1/slides")
setwd("~/Documents/git/ShinyCourse/Day 2/slides")
raw_data <- read.csv("../../Day 1/data/raw_data.csv")
raw_data <- read.csv("../../Day 1/data/raw_data.csv")
setwd("~/Documents/git/ShinyCourse/Day 2/slides")
raw_data <- read.csv("../../Day 1/data/raw_data.csv")
?leaflet
library(leaflet)
?leaflet
# Use only one year
leaflet_data <- raw_data %>%
dplyr::mutate(year = substr(date, 1,4)) %>%
dplyr::filter(year == 2014)
?addTiles
m <- leaflet()
m <- m %>%
addCircles(data=leaflet_data, lng=~x, lat=~y)
m %>% addControl()
m %>% addControl(m)
m %>% addTiles()
m %>% addTiles()
?addTiles
m %>% addProviderTiles(providers$Thunderforest)
m %>% addProviderTiles(providers$Wikimedia)
m %>% addProviderTiles(providers$Stamen.TerrainBackground)
m %>% addProviderTiles(providers$Stamen.TopOSMRelief)
m %>% addProviderTiles(providers$Stamen.Watercolor)
m %>% addProviderTiles(providers$Stamen.Terrain)
# m %>% addProviderTiles(providers$Stamen.Terrain)
m %>% addProviderTiles("Stamen.Terrain")
m %>% addProviderTiles(providers$OpenStreetMap.HOT)
m %>% addProviderTiles(providers$OpenInfraMap)
m %>% addProviderTiles(providers$OpenInfraMap.Power)
m %>% addProviderTiles(providers$Hydda)
m %>% addProviderTiles(providers$Hydda.Full)
m %>% addProviderTiles(providers$Hydda.RoadsAndLabels)
m %>% addProviderTiles(providers$Hydda.Base)
m %>% addProviderTiles(providers$Esri.WorldTopoMap)
m %>% addProviderTiles(providers$Esri.NatGeoWorldMap)
m %>% addProviderTiles(providers$Wikimedia)
m %>% addProviderTiles(providers$CartoDB)
m %>% addProviderTiles(providers$CartoDB.Positron)
m %>% addProviderTiles(providers$CartoDB.DarkMatter)
m %>% addProviderTiles(providers$CartoDB.Positron)
m %>% addProviderTiles(providers$CartoDB.DarkMatter)
m %>% addProviderTiles(providers$CartoDB.Positron)
m <- addCircles(m, data=leaflet_data, lng=~x, lat=~y)
m <- addCircles(m, data=leaflet_data, lng=~x, lat=~y)
m <- m %>%
addCircles(data=leaflet_data, lng=~x, lat=~y)
m <- leaflet()
m <- addCircles(m, data=leaflet_data, lng=~x, lat=~y)
m <- addCircles(m, data=leaflet_data, lng=~x, lat=~y, zoom = 12)
?addCircles
?colorNumeric
?addScaleBar
m %>% addScaleBar(position = "bottomleft")
m <- m %>% addScaleBar(position = "bottomleft")
m
m %>% addProviderTiles(providers$Esri.WorldTopoMap)
m %>% addProviderTiles(providers$Esri.NatGeoWorldMap)
m %>% addProviderTiles(providers$Esri.WorldTopoMap)
m %>% addProviderTiles(providers$Stamen.Terrain)
m <- m %>% addProviderTiles(providers$OpenWeatherMap.Temperature)
m
m <- m %>% addProviderTiles(providers$OpenMapSurfer)
m
m <- m %>% addProviderTiles(providers$OpenMapSurfer)
m
m %>% addProviderTiles(providers$Stamen.Terrain)
m %>% addProviderTiles(providers$OpenMapSurfer)
m %>% addProviderTiles(providers$Esri.WorldTopoMap)
m %>% addProviderTiles(providers$OpenMapSurfer.Roads)
m <- m %>% addProviderTiles(providers$Esri.WorldImagery)
m
m %>% addProviderTiles(providers$Stamen.Terrain)
m %>% addProviderTiles(providers$Esri.NatGeoWorldMap)
m %>% addProviderTiles(providers$CartoDB.Positron)
m %>% addProviderTiles(providers$Esri.WorldTopoMap)
m %>% addProviderTiles(providers$Esri.WorldImagery)
m %>% addProviderTiles(providers$Stamen.Terrain)
m %>% addProviderTiles(providers$CartoDB)
m %>% addProviderTiles(providers$CartoDB.Positron)
m %>% addProviderTiles(providers$Esri.WorldTopoMap)
m
m %>% addProviderTiles(providers$Esri.WorldTopoMap)
m
m <- m %>% addProviderTiles(providers$Esri.WorldTopoMap)
m
m %>% addProviderTiles(providers$Wikimedia)
m %>% addProviderTiles(providers$CartoDB.Voyager)
# m created using code from previous slides
m <- leaflet() %>%
addCircles(data=leaflet_data, lng=~x, lat=~y)
m
m %>% addProviderTiles(providers$CartoDB.Voyager)
m %>% addProviderTiles("CartoDB.Voyager")
m %>% addProviderTiles(providers$Wikimedia)
install.packages("leaflet")
install.packages("leaflet")
install.packages("leaflet")
